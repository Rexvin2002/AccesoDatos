# README - Sistema de Gesti√≥n de Licencias con JDBC

## üìù Descripci√≥n
Aplicaci√≥n Java para gesti√≥n de usuarios y licencias mediante JDBC con MySQL. Incluye dos componentes principales:
1. **JDBC1**: Clase completa para operaciones CRUD con transacciones y relaciones entre tablas
2. **App**: Ejemplo b√°sico de conexi√≥n y consulta a MySQL

## üîß Caracter√≠sticas principales (JDBC1)
- **Gesti√≥n transaccional** con commit/rollback
- **Relaci√≥n 1:N** entre usuarios y licencias
- **Operaciones avanzadas**:
  - Inserci√≥n de usuario con m√∫ltiples licencias en una transacci√≥n
  - Eliminaci√≥n en cascada de licencias
  - Consultas con PreparedStatement seguras
- **Modelo de datos mejorado**:
  - Tabla usuarios con DNI √∫nico
  - Tabla licencias con fechas y tipos
  - Integridad referencial con claves for√°neas

## üõ†Ô∏è Uso b√°sico (JDBC1)
```java
// 1. Crear instancia y tablas
JDBC1 jdbc = new JDBC1("testdb", "root", "password");
jdbc.createTables();

// 2. Insertar usuario con licencias
ArrayList<ArrayList<String>> licencias = new ArrayList<>();
ArrayList<String> licencia = new ArrayList<>();
licencia.add("B1"); licencia.add("2023-01-01"); licencia.add("2025-01-01");
licencias.add(licencia);

jdbc.insertLicencias("12345678A", "Calle Falsa 123", "28000", "John Doe", licencias);

// 3. Eliminar licencias por DNI
jdbc.eliminarLicencias("12345678A");

// 4. Cerrar conexi√≥n
jdbc.closeConnection();
```

## ‚öôÔ∏è Estructura de la base de datos
```sql
CREATE TABLE usuarios (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DNI VARCHAR(9) UNIQUE,
    DIRECCION VARCHAR(100),
    CP VARCHAR(5),
    NOMBRE VARCHAR(100)
);

CREATE TABLE licencias (
    ID INT,
    TIPO VARCHAR(2),
    EXPEDICION DATETIME,
    CADUCIDAD DATETIME,
    FOREIGN KEY (ID) REFERENCES usuarios(ID) ON DELETE CASCADE
);
```

## üë®‚Äçüíª Autor
Kevin G√≥mez Valderas

## üìå Requisitos
- Java JDK 11+
- MySQL Server 8+
- Driver JDBC para MySQL (com.mysql.cj.jdbc.Driver)
- Credenciales de acceso a MySQL

## üí° Mejoras implementadas
- **PreparedStatement** para evitar SQL injection
- **Transacciones** para operaciones at√≥micas
- **TRY-WITH-RESOURCES** para manejo autom√°tico de recursos
- **Integridad referencial** con ON DELETE CASCADE
- **Manejo de errores** con rollback autom√°tico

## Ejemplo App.java
```java
// Conexi√≥n simple con try-with-resources
try (Connection conn = DriverManager.getConnection(url, user, pass);
     Statement stmt = conn.createStatement();
     ResultSet rs = stmt.executeQuery("SELECT * FROM users")) {
     
    while(rs.next()) {
        System.out.println(rs.getInt("id") + ": " + rs.getString("name"));
    }
}
```