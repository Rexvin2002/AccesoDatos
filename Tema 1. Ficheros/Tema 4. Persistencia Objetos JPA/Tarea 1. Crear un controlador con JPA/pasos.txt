PASOS A SEGUIR:
PASO 0. SpringBoot. PREPARAR UN PROYECTO SPRINGBOOT CON DEPENDENCIAS DE JPA y MYSQL (Visto anteriormente)

PASO 1. PARA LA CONEXIÓN A MYSQL hace falta configurar dentro del fichero application.properties:

spring.application.name=app
# MySQL 
spring.datasource.url=jdbc:mysql://localhost:3306/pruebas
spring.datasource.username=root
spring.datasource.password=admin
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 
# JPA
# Crea la tabla al ejecutar la App
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
# spring.jpa.defer-datasource-initialization=true

spring.sql.init.mode=always
PASO 2. Paquetes.

Crear 2 Packages (por organización): Entities y Repositories

PASO 3. Entidades. 

Dentro del entidades crear una clase Java > por ejemplo Clientes.java que representa nuestra "entidad" que queremos almacenar en base de datos. 

Los requisitos de la clase Entidad son:

Debe tener un constructor vacío.
Debe tener otros constructores.
Debe tener varios campos, todos con getter y setter creados.
Deben incluirse en la clase las ANOTACIONES DE JPA, como ejemplo:
@Entity
@Table(name="clientes")
public class Clientes {

@Id
@GeneratedValue( strategy = GenerationType.IDENTITY )
Long idEmpleado;

@Column(name="nombre", unique = true, length = 40)
String nombre;

@Column(name="apellido", length = 40)
String apellido;

@Column(name="direccion", length = 100)
String direccion;
 
 ..... Constructores, Getters, Setters, ...

PASO 4. Repositories / Controladores

Dentro del entidades crear una interfaz Java que actuará de controlador / repositorio para gestionar el almacenamiento de Entidades, en concreto de la entidad creada anteriormente, por ejemplo clientesRepositorio.java

package com.example.repositories;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.entity.Clientes;

@Repository
public interface ClientesController extends JpaRepository<Clientes,Long> {
o
public interface ClientesController extends CrudRepository<Clientes,Long> {

}
 
PASO 5. Realizar pruebas de los repositorios, utilizando los controladores:

@SpringBootApplication

public class SpringbootJpaApp implements CommandLineRunner {
 
@Autowired
private ClientRepository clientRepository;
 
public static void main(String[] args) {
SpringApplication.run(SpringbootJpaRelationshipApplication.class, args);
}
 
@Override
public void run(String... args) throws Exception {
funcionPruebas1();
}
 
@Transactional
public void funcionPruebas1() {
         
         // ESCRITURA EN BBDD
Cliente cl1 = new Cliente("Pepe");
Cliente cl2 = new Cliente("Juan");
 
// uno a uno
clientRepository.save(cl1);
clientRepository.save(cl2);
 
// juntos
clientRepository.saveAll(List.of(cl1, cl2));
 
// LECTURAS DE BASE DE DATOS
Optional<Client> optionalClient = clientRepository.findById(1L);
}